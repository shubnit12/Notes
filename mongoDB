1. What is MongoDB?
MongoDB is a NoSQL database that stores data in flexible, JSON-like documents. It's designed for scalability and performance.

2. Installation and Setup
To get started, you need to install MongoDB on your local machine or use a cloud service (like MongoDB Atlas).

3. Databases and Collections
In MongoDB, databases contain collections, which are analogous to tables in relational databases.

Creating a Database and Collection
use myDatabase;       // Switch to (or create) a database
db.createCollection("myCollection"); // Create a collection
4. Documents
Documents are the basic unit of data in MongoDB, stored in BSON format (Binary JSON).

Example Document
{
  "_id": ObjectId("603b2b1f1fd4c1861a7e65f4"),
  "name": "Alice",
  "age": 30,
  "email": "alice@example.com"
}
5. CRUD Operations
CRUD stands for Create, Read, Update, and Delete, which are the four basic operations for interacting with the database.

Create
db.myCollection.insertOne({ name: "Bob", age: 25, email: "bob@example.com" });
Read
db.myCollection.find({ age: 30 }); // Find documents where age is 30
Update
db.myCollection.updateOne(
  { name: "Bob" },
  { $set: { age: 26 } }
);
Delete
db.myCollection.deleteOne({ name: "Bob" });
6. Queries
MongoDB supports a rich query language that allows you to filter documents based on various criteria.

Example Query
db.myCollection.find({ age: { $gt: 20 } }); // Find all documents with age greater than 20
7. Indexing
Indexes improve the speed of data retrieval operations on collections. You can create indexes on fields that are frequently queried.

db.myCollection.createIndex({ name: 1 }); // Create an index on the 'name' field
8. Aggregation Framework
MongoDB's aggregation framework allows you to process data and perform calculations using pipelines.

Aggregation Example
db.myCollection.aggregate([
  { $group: { _id: "$age", count: { $sum: 1 } } } // Count documents by age
]);
9. Data Modeling
Model your data effectively, using embedded documents or references based on your application's needs. Consider normalization vs. denormalization.

10. Relationships
MongoDB can handle relationships between documents in two ways: embedding and referencing.

Embedding Example
{
  "name": "Alice",
  "address": { "city": "New York", "state": "NY" }
}
Referencing Example
// User Document
{
  "_id": ObjectId("603b2b1f1fd4c1861a7e65f4"),
  "name": "Alice"
}

// Post Document
{
  "userId": ObjectId("603b2b1f1fd4c1861a7e65f4"),
  "content": "Hello World!"
}
11. Replication
MongoDB supports replication, allowing you to maintain multiple copies of data across different servers, which helps improve availability and reliability.

12. Sharding
Sharding is a method for distributing data across multiple servers to ensure horizontal scalability.

13. MongoDB Shell (mongosh)
The MongoDB Shell is a command-line interface that allows you to interact with your MongoDB instance.

mongosh
14. MongoDB Drivers
MongoDB provides official drivers for various programming languages to interact with your database (Node.js, Python, Java, etc.).

Example in Node.js
const { MongoClient } = require('mongodb');
15. Error Handling
Understanding how to handle errors in MongoDB operations to ensure your application is robust.

For example, you can use try-catch blocks in your application's code when interacting with MongoDB.
16. Field Operators
Operators such as $gt, $lt, $eq, $in, and $or help filter documents in queries.

db.myCollection.find({ age: { $lt: 30, $gt: 20 } }); // Age between 21 and 29
17. Input Validation
You can validate input data using MongoDB's schema validation feature (with JSON Schema).

db.createCollection("myCollection", {
  validator: { $jsonSchema: { bsonType: "object", required: [ "name" ], properties: { name: { bsonType: "string" } } } }
});
18. Environment Configuration
Configurations can depend on your environment (development, testing, production), so managing connection strings and secrets is crucial.

19. Backup and Restore
Regularly back up your data and know how to restore it using MongoDB tools like mongodump and mongorestore.

20. Monitoring and Performance Tuning
Use MongoDBâ€™s built-in tools and logs to monitor performance and optimize queries and indexes.
