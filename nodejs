1. Installation and Setup
Installation:
First, ensure that Node.js is installed. You can download it from nodejs.org.

Basic Setup:

mkdir myapp
cd myapp
npm init -y                # Initializes a package.json file
npm install express        # Installs Express
Basic Server:
Create a file named app.js and add the following code:

const express = require('express');
const app = express();

app.get('/', (req, res) => {
    res.send('Hello World!');
});

app.listen(3000, () => {
    console.log('Server is running on port 3000');
});
Run your application:

node app.js
Visit http://localhost:3000 in your browser to see "Hello World!"

2. Creating a Basic Server
The above code already demonstrates this. Here’s an extended example:

app.get('/about', (req, res) => {
    res.send('This is the About page');
});
Now, when visiting http://localhost:3000/about, it will display "This is the About page."

3. Routing
Defining Routes:

app.get('/users', (req, res) => {
    res.send('User List');
});

app.post('/users', (req, res) => {
    res.send('User Created');
});

// Route with parameters
app.get('/users/:id', (req, res) => {
    const userId = req.params.id;
    res.send(`User ID: ${userId}`);
});
Now, accessing http://localhost:3000/users/123 will show "User ID: 123."

4. Middleware
Basic Middleware:
Middleware functions are executed in sequence during request-response cycles. Here's a logging middleware:

app.use((req, res, next) => {
    console.log(`${req.method} ${req.url}`);
    next(); // Pass control to the next middleware
});

// A simple route
app.get('/test', (req, res) => {
    res.send('Test Route');
});
5. Serving Static Files
To serve static files from a directory, use express.static():

app.use(express.static('public'));
Create a folder named public and add an index.html file inside it with content:

<h1>Welcome to my website!</h1>
Visit http://localhost:3000/index.html to see it.

6. Error Handling
Here’s how to set up a basic error-handling middleware:

app.get('/error', (req, res, next) => {
    const err = new Error('This is an error!');
    next(err); // Pass the error to the error handler
});

// Error handling middleware
app.use((err, req, res, next) => {
    console.log(err.message);
    res.status(500).send('Something broke!');
});
Access http://localhost:3000/error to trigger the error.

7. Templating Engines
Integrate a templating engine like EJS:

npm install ejs
Set up EJS:

app.set('view engine', 'ejs');
app.set('views', './views'); // Setting views directory
Create a views directory and a file index.ejs inside it:

<h1><%= title %></h1>
Now modify the route to render this view:

app.get('/', (req, res) => {
    res.render('index', { title: 'Hello, EJS!' });
});
8. Environment Variables
Use dotenv for managing environment variables:

npm install dotenv
Create a .env file:

PORT=5000
Load the variables in your app:

require('dotenv').config();
const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
9. API Development
Set up RESTful routes:

app.get('/api/users', (req, res) => {
    res.json([{ id: 1, name: 'John Doe' }, { id: 2, name: 'Jane Doe' }]);
});

app.post('/api/users', (req, res) => {
    // Here we would typically save the user information to a database
    res.status(201).json({ message: 'User created' });
});
10. Database Integration
For example, integrate with MongoDB using Mongoose:

npm install mongoose
Set up Mongoose:

const mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true });

const User = mongoose.model('User', { name: String });

app.post('/users', async (req, res) => {
    const user = new User({ name: req.body.name });
    await user.save();
    res.status(201).send(user);
});
This is a simple example of how you can create and store user data in a MongoDB database.
